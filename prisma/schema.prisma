generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model application {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String      @db.Uuid
  job_posting_id   String      @db.Uuid
  application_date DateTime?   @db.Timestamp(6)
  status           String?     @db.VarChar(50)
  resume           String?     @db.VarChar(255)
  cover_letter     String?     @db.VarChar(255)
  created_at       DateTime    @default(now()) @db.Timestamp(6)
  updated_at       DateTime    @default(now()) @db.Timestamp(6)
  job_posting      job_posting @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?       @db.VarChar(255)
  industry     String?       @db.VarChar(100)
  location     String?       @db.VarChar(100)
  founded_date DateTime?     @db.Timestamp(6)
  website      String?       @db.VarChar(100)
  name         String        @db.VarChar(255)
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  user_id      String        @db.Uuid
  tenant_id    String        @db.VarChar(255)
  user         user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee     employee[]
  job_posting  job_posting[]
}

model employee {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String               @db.Uuid
  company_id         String               @db.Uuid
  job_title          String?              @db.VarChar(100)
  start_date         DateTime?            @db.Timestamp(6)
  end_date           DateTime?            @db.Timestamp(6)
  salary             Int?
  department         String?              @db.VarChar(100)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  employee_id        String?              @unique @db.VarChar(255)
  company            company              @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  performance_review performance_review[]
}

model job_posting {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(100)
  description  String?       @db.VarChar(255)
  company_id   String        @db.Uuid
  location     String?       @db.VarChar(100)
  posted_date  DateTime?     @db.Timestamp(6)
  closing_date DateTime?     @db.Timestamp(6)
  salary       Int?
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  job_id       String?       @unique @db.VarChar(255)
  application  application[]
  company      company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_review {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id       String    @db.Uuid
  review_date       DateTime? @db.Timestamp(6)
  reviewer_id       String    @db.Uuid
  performance_score Int?
  comments          String?   @db.VarChar(255)
  recommendations   String?   @db.VarChar(255)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  employee          employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user      @relation(fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  application        application[]
  company            company[]
  employee           employee[]
  performance_review performance_review[]
}
